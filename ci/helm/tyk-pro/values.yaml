# Default values for tyk-dashboard.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: ""
fullnameOverride: ""

enableSharding: false

# Set to true to use Tyk as the Ingress gateway to an Istio Service Mesh
# We apply some exceptions to the Istio IPTables so inbound calls to the 
# Gateway and Dashboard are exposed to the outside world - see the deployment templates for implementation
enableIstioIngress: false
bootstrap: true

secrets:
  APISecret: "CHANGEME"
  AdminSecret: "54321"

redis:
    shardCount: 128
    useSSL: false

mongo:
    useSSL: false

mdcb:
  enabled: false
  useSSL: false
  replicaCount: 1
  containerPort: 9090
  healthcheckport: 8181
  license: ""
  forwardAnalyticsToPump: true
  image:
    repository: tykio/tyk-mdcb-docker #requires credential
    tag: v1.7.7
    pullPolicy: Always
  service:
    type: LoadBalancer
    port: 9090
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  extraEnvs: []


tib:
  enabled: false
  useSSL: true
  replicaCount: 1
  containerPort: 3010
  image:
    repository: tykio/tyk-identity-broker
    tag: v1.1.0
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 3010
  ingress:
    enabled: false
    annotations: {}
    path: /
    hosts:
      - tib.local
    tls: []
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  extraEnvs: []
  configMap:
    profiles: tyk-tib-profiles-conf
dash:
  replicaCount: 1
  hostName: "localhost"
  license: ""
  containerPort: 3000
  image:
    repository: tykio/tyk-dashboard
    tag: v3.1.2
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 3000
  ingress:
    enabled: false
    annotations: {}
    path: /
    hosts:
      - tyk-dashboard.local
    tls: []
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  extraEnvs: []
  extraEnvs: 
    - name: TYK_DB_REDISHOST
      value:  redis.tykpro-control-plane.svc.cluster.local

portal:
  bootstrap: false
  ingress:
    enabled: false
    annotations: {}
    path: /
    hosts:
      - tyk-portal.local
    tls: []
gateway:
  kind: DaemonSet
  replicaCount: 1
  tags: "private"
  tls: false
  containerPort: 8080
  image:
    repository: tykio/tyk-gateway
    tag: v3.1.2
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 8080
    externalTrafficPolicy: Local
    annotations: {}
  ingress:
    enabled: false
    annotations: {}
    path: /
    hosts:
      - tyk-gw.local
    tls: []
  resources: {}
  nodeSelector: {}
  tolerations:
    - key: node-role.kubernetes.io/master
      effect: NoSchedule
  affinity: {}
  extraEnvs: 
    - name: TYK_LOGLEVEL
      value: debug
    - name: TYK_GW_COPROCESSOPTIONS_ENABLECOPROCESS
      value: true
    - name: TYK_GW_COPROCESSOPTIONS_COPROCESSGRPCSERVER
      value: "tcp://grpc-plugin.tykpro-control-plane.svc.cluster.local:9999"

pump:
  replicaCount: 1
  image:
    repository: tykio/tyk-pump-docker-pub
    tag: v1.2.0
    pullPolicy: Always
  annotations: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  extraEnvs: []

rbac: true
