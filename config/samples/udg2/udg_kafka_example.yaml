#At the moment there ApiDefinition of the UDG using a kafka datasource is created correctly but is not working inside a
#k8s environment. After creating/fixing the tyk-kafka helmcharts, the basic example should work too.
#Please use this just a blueprint for testing this feature functionality and not in production.
---
apiVersion: tyk.tyk.io/v1alpha1
kind: ApiDefinition
metadata:
  name: udg
spec:
  name: Universal Data Graph Kafka
  use_keyless: true
  protocol: http
  active: true
  proxy:
    target_url: ""
    listen_path: /udg
    strip_listen_path: true
  version_data:
    default_version: Default
    not_versioned: true
    versions:
      Default:
        name: Default
  graphql:
    enabled: true
    execution_mode: executionEngine
    schema: |
      type Product {
        name: String!
        price: Int!
        in_stock: Int!
      }
        
      type Query {
        topProducts(first: Int): [Product]
      }
        
      type Subscription {
        stock(name: String): Product!
      }
    version: "2"
    last_schema_update: "2022-10-12T14:27:55.511+03:00"
    type_field_configurations: []
    playground:
      enabled: true
      path: /playground
    engine:
      field_configs:
        - type_name: Query
          field_name: topProducts
          disable_default_mapping: false
          path:
            - "topProducts"
        - type_name: Subscription
          field_name: stock
          disable_default_mapping: false #very important for rest APIs
          path:
            - "stock"
      data_sources:
        - kind: "GraphQL"
          name: "topProducts"
          internal: false
          root_fields:
            - type: Query
              fields:
                - "topProducts"
          config:
            url: "http://host.docker.internal:8000/"
            method: "POST"
            headers: {}
            default_type_name: "Product"
        - kind: "Kafka"
          internal: false
          name: "kafka-consumer-group"
          root_fields:
            - type: "Subscription"
              fields:
                - "stock"
          config:
            broker_addresses: ["host.docker.internal:9092"]
            topics:
              - "test.topic.{{.arguments.name}}"
            group_id: "test.group"
            client_id: "tyk-kafka-integration-{{.arguments.name}}"