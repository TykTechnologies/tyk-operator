# Create Service & Deployment of Posts API
---
apiVersion: v1
kind: Service
metadata:
  name: posts
  labels:
    app: posts
spec:
  ports:
    - name: http
      port: 4002
      targetPort: 4002
  selector:
    app: posts
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: posts
spec:
  replicas: 1
  selector:
    matchLabels:
      app: posts
      version: v1
  template:
    metadata:
      labels:
        app: posts
        version: v1
    spec:
      containers:
        - image: zalbiraw/go-api-test-service
          imagePullPolicy: Always
          name: users
          command: ["./posts/server"]
          env:
            - name: PORT
              value: "4002"
---
apiVersion: tyk.tyk.io/v1alpha1
kind: SubGraph
metadata:
  name: posts-subgraph
spec:
  subgraph:
    schema: |
      directive @extends on OBJECT | INTERFACE
      
      directive @external on FIELD_DEFINITION
      
      directive @key(fields: _FieldSet!) on OBJECT | INTERFACE
      
      directive @provides(fields: _FieldSet!) on FIELD_DEFINITION
      
      directive @requires(fields: _FieldSet!) on FIELD_DEFINITION
      
      scalar _Any
      
      union _Entity = Post | User
      
      scalar _FieldSet
      
      type _Service {
        sdl: String
      }
      
      type Entity {
        findPostByID(id: ID!): Post!
        findUserByID(id: ID!): User!
      }
      
      type Post {
        id: ID!
        userId: ID!
        title: String!
        body: String!
      }
      
      type Query {
        post(id: ID!): Post!
        posts: [Post!]!
        _entities(representations: [_Any!]!): [_Entity]!
        _service: _Service!
      }
      
      type User {
        id: ID!
        posts: [Post!]!
      }
    sdl: |
      extend type Query {
          post(id: ID!): Post!
          posts: [Post!]!
      }
      
      type Post @key(fields: "id") {
          id: ID!
          userId: ID!
          title: String!
          body: String!
      }
      
      extend type User @key(fields: "id") {
          id: ID! @external
          posts: [Post!]!
      }

---
apiVersion: tyk.tyk.io/v1alpha1
kind: ApiDefinition
metadata:
  name: federation-posts-subgraph
spec:
  name: Federation - Posts Subgraph
  protocol: "http"
  do_not_track: false
  use_keyless: true
  active: true
  internal: true
  graphql:
    enabled: true
    execution_mode: subgraph
    graph_ref: posts-subgraph
    version: "2"
    playground:
      enabled: false
      path: ""
  proxy:
    target_url: http://posts.default.svc:4002/query
    listen_path: /posts-subgraph/
    disable_strip_slash: true
